%!PS-Adobe-3.0
%%Title: Homework01_ProgramSet03.c
%%For: root
%%Creator: VIM - Vi IMproved 8.0 (2016 Sep 12)
%%CreationDate: Tue Feb  6 03:22:00 2018
%%DocumentData: Clean8Bit
%%Orientation: Portrait
%%Pages: (atend)
%%PageOrder: Ascend
%%BoundingBox: 59 49 564 800
%%DocumentMedia: A4 595 842 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%DocumentSuppliedResources: procset VIM-Prolog 1.4 1
%%+ encoding VIM-latin1 1.0 0
%%Requirements: duplex collate
%%EndComments
%%BeginDefaults
%%PageResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-Oblique
%%+ font Courier-BoldOblique
%%PageMedia: A4
%%EndDefaults
%%BeginProlog
%%BeginResource: procset VIM-Prolog
%%BeginDocument: /usr/share/vim/vim80/print/prolog.ps
%!PS-Adobe-3.0 Resource-ProcSet
%%Title: VIM-Prolog
%%Version: 1.4 1
%%EndComments
% Editing of this file is NOT RECOMMENDED.  You run a very good risk of causing
% all PostScript printing from VIM failing if you do.  PostScript is not called
% a write-only language for nothing!
/packedarray where not{userdict begin/setpacking/pop load def/currentpacking
false def end}{pop}ifelse/CP currentpacking def true setpacking
/bd{bind def}bind def/ld{load def}bd/ed{exch def}bd/d/def ld
/db{dict begin}bd/cde{currentdict end}bd
/T true d/F false d
/SO null d/sv{/SO save d}bd/re{SO restore}bd
/L2 systemdict/languagelevel 2 copy known{get exec}{pop pop 1}ifelse 2 ge d
/m/moveto ld/s/show ld /ms{m s}bd /g/setgray ld/r/setrgbcolor ld/sp{showpage}bd
/gs/gsave ld/gr/grestore ld/cp/currentpoint ld
/ul{gs UW setlinewidth cp UO add 2 copy newpath m 3 1 roll add exch lineto
stroke gr}bd
/bg{gs r cp BO add 4 -2 roll rectfill gr}bd
/sl{90 rotate 0 exch translate}bd
L2{
/sspd{mark exch{setpagedevice}stopped cleartomark}bd
/nc{1 db/NumCopies ed cde sspd}bd
/sps{3 db/Orientation ed[3 1 roll]/PageSize ed/ImagingBBox null d cde sspd}bd
/dt{2 db/Tumble ed/Duplex ed cde sspd}bd
/c{1 db/Collate ed cde sspd}bd
}{
/nc{/#copies ed}bd
/sps{statusdict/setpage get exec}bd
/dt{statusdict/settumble 2 copy known{get exec}{pop pop pop}ifelse
statusdict/setduplexmode 2 copy known{get exec}{pop pop pop}ifelse}bd
/c{pop}bd
}ifelse
/ffs{findfont exch scalefont d}bd/sf{setfont}bd
/ref{1 db findfont dup maxlength dict/NFD ed{exch dup/FID ne{exch NFD 3 1 roll
put}{pop pop}ifelse}forall/Encoding findresource dup length 256 eq{NFD/Encoding
3 -1 roll put}{pop}ifelse NFD dup/FontType get 3 ne{/CharStrings}{/CharProcs}
ifelse 2 copy known{2 copy get dup maxlength dict copy[/questiondown/space]{2
copy known{2 copy get 2 index/.notdef 3 -1 roll put pop exit}if pop}forall put
}{pop pop}ifelse dup NFD/FontName 3 -1 roll put NFD definefont pop end}bd
CP setpacking
(\004)cvn{}bd
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%BeginResource: encoding VIM-latin1
%%BeginDocument: /usr/share/vim/vim80/print/latin1.ps
%!PS-Adobe-3.0 Resource-Encoding
%%Title: VIM-latin1
%%Version: 1.0 0
%%EndComments
/VIM-latin1[
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quotesingle
/parenleft /parenright /asterisk /plus /comma /minus /period /slash
/zero /one /two /three /four /five /six /seven
/eight /nine /colon /semicolon /less /equal /greater /question
/at /A /B /C /D /E /F /G
/H /I /J /K /L /M /N /O
/P /Q /R /S /T /U /V /W
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
/grave /a /b /c /d /e /f /g
/h /i /j /k /l /m /n /o
/p /q /r /s /t /u /v /w
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /periodcentered
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis]
/Encoding defineresource pop
% vim:ff=unix:
%%EOF
%%EndDocument
%%EndResource
%%EndProlog
%%BeginSetup
595 842 0 sps
1 nc
T F dt
T c
%%IncludeResource: font Courier
/_F0 /VIM-latin1 /Courier ref
/F0 10 /_F0 ffs
%%IncludeResource: font Courier-Bold
/_F1 /VIM-latin1 /Courier-Bold ref
/F1 10 /_F1 ffs
%%IncludeResource: font Courier-Oblique
/_F2 /VIM-latin1 /Courier-Oblique ref
/F2 10 /_F2 ffs
%%IncludeResource: font Courier-BoldOblique
/_F3 /VIM-latin1 /Courier-BoldOblique ref
/F3 10 /_F3 ffs
/UO -1 d
/UW 0.5 d
/BO -2.5 d
%%EndSetup
%%Page: 1 1
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
0 g
(Homework01_ProgramSet03.c                                                     Page 1)59.5 792.4 ms
F0 sf
(#include<stdio.h>)59.5 772.4 ms
(#include<stdlib.h>)59.5 762.4 ms
(#include<string.h>)59.5 752.4 ms
(/*******************************************)59.5 732.4 ms
(/* Homework 01 - Program Set 03)59.5 722.4 ms
(/*)59.5 712.4 ms
(/* This program maintains information about)59.5 702.4 ms
(/* your stocks.  The user will enter the)59.5 692.4 ms
(/* data for each stock: stock name, number)59.5 682.4 ms
(/* of shares, buy price, current price,)59.5 672.4 ms
(/* and yearly fees.  The program will calculate)59.5 662.4 ms
(/* the inital cost, current cost, and profit.)59.5 652.4 ms
(/*)59.5 642.4 ms
(/* The program will print out the stock name,)59.5 632.4 ms
(/* initial cost, current cost, and profit)59.5 622.4 ms
(/& for each stock)59.5 612.4 ms
(/*)59.5 602.4 ms
(/* The program will finally calculate and print)59.5 592.4 ms
(/* the total profit for all of the stocks)59.5 582.4 ms
(/*)59.5 572.4 ms
(/* Program Set 03)59.5 562.4 ms
(/*)59.5 552.4 ms
(/* Peter Tang)59.5 542.4 ms
(/* 959213)59.5 532.4 ms
(/* 1/30/18)59.5 522.4 ms
(*******************************************/)59.5 512.4 ms
(//Declaration for node of linked list)59.5 492.4 ms
(struct Node)59.5 482.4 ms
({)59.5 472.4 ms
(        char *name;)59.5 462.4 ms
(        int numShares;)59.5 452.4 ms
(        double buyPricePerShare;)59.5 442.4 ms
(        double currentPricePerShare;)59.5 432.4 ms
(        double yearlyFees;)59.5 422.4 ms
(        double initialCost;)59.5 412.4 ms
(        double currentCost;)59.5 402.4 ms
(        double profit;)59.5 392.4 ms
(        struct Node *next;)59.5 382.4 ms
(};)59.5 372.4 ms
(int main\(\))59.5 352.4 ms
({)59.5 342.4 ms
(        //DECLARATION)59.5 332.4 ms
(        )59.5 322.4 ms
(        //Constants for column width output spacing)59.5 312.4 ms
(        const int INPUT_COL = 24;)59.5 302.4 ms
(        const int OUTPUT_COL = 24;)59.5 292.4 ms
(        const int EXIT_COL = 41;)59.5 282.4 ms
(        //Declaration of member variables)59.5 262.4 ms
(        struct Node *head;)59.5 252.4 ms
(        struct Node *node;)59.5 242.4 ms
(        struct Node *tail;)59.5 232.4 ms
(        char buffer[100];)59.5 222.4 ms
(        double sumProfits;)59.5 212.4 ms
(        //Variable initialization)59.5 192.4 ms
(        head = NULL;)59.5 182.4 ms
(        node = NULL;)59.5 172.4 ms
(        tail = NULL;)59.5 162.4 ms
(        )59.5 152.4 ms
(        //INPUT)59.5 142.4 ms
(        // Allows user to input stock information, exit with 0)59.5 132.4 ms
(        // Data stored in a linked list)59.5 122.4 ms
(        printf\("\\n%*s\\n\\n", EXIT_COL, "Enter 0 for 'Stock name' to exit"\);)59.5 112.4 ms
(        printf\("%*s ", INPUT_COL, "Stock name:"\);)59.5 102.4 ms
(        while \(fgets\(buffer, sizeof\(buffer\), stdin\) == NULL\))59.5 92.4 ms
(            printf\("%-*s", INPUT_COL, "Stock name:"\);)59.5 82.4 ms
(        )59.5 72.4 ms
(        //checks for exit character 0)59.5 62.4 ms
(        while\(buffer[0] != '0'\))59.5 52.4 ms
re sp
%%PageTrailer
%%Page: 2 2
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(Homework01_ProgramSet03.c                                                     Page 2)59.5 792.4 ms
F0 sf
(        {)59.5 772.4 ms
(                //allocates memory for size of node, and string inside node)59.5 762.4 ms
(                //copies characters from input buffer into node name var)59.5 752.4 ms
(                node = \(struct Node*\) malloc\(sizeof\(struct Node\)\);)59.5 742.4 ms
(                node->name = \(char*\) malloc\(sizeof\(char\) * \(strlen\(buffer\) + 1\)\);)59.5 732.4 ms
(                strncpy\(node->name, buffer, strlen\(buffer\)+1\);)59.5 722.4 ms
(                printf\("%*s ", INPUT_COL, "Number of shares:"\);)59.5 702.4 ms
(                scanf\("%d", &node->numShares\);)59.5 692.4 ms
(                printf\("%*s $", INPUT_COL, "Buying price per share:"\);)59.5 672.4 ms
(                scanf\("%lf", &node->buyPricePerShare\);)59.5 662.4 ms
(                printf\("%*s $", INPUT_COL, "Current price per share:"\);)59.5 642.4 ms
(                scanf\("%lf", &node->currentPricePerShare\);)59.5 632.4 ms
(                printf\("%*s $", INPUT_COL, "Yearly fees:"\);)59.5 612.4 ms
(                scanf\("%lf", &node->yearlyFees\);)59.5 602.4 ms
(                getchar\(\);)59.5 592.4 ms
(                )59.5 582.4 ms
(                //CALCULATIONS)59.5 572.4 ms
(                // calcs per instructions)59.5 562.4 ms
(                node->initialCost = node->numShares * node->buyPricePerShare;)59.5 552.4 ms
(                node->currentCost = node->numShares * node->currentPricePerShare;)59.5 542.4 ms
(                node->profit = node->currentCost - node->initialCost - node->yearlyF)59.5 532.4 ms
(ees;)59.5 522.4 ms
(                //assigns pointers to linked list nodes)59.5 502.4 ms
(                if\(head == NULL\))59.5 492.4 ms
(                        head = node;)59.5 482.4 ms
(                else)59.5 472.4 ms
(                        tail->next = node;)59.5 462.4 ms
(                tail = node;)59.5 452.4 ms
(                tail->next = NULL;)59.5 442.4 ms
(                //INPUT)59.5 422.4 ms
(                //get next input or exit )59.5 412.4 ms
(                printf\("\\n%*s ", INPUT_COL, "Stock name:"\);)59.5 402.4 ms
(                while \(fgets\(buffer, sizeof\(buffer\), stdin\) == NULL\))59.5 392.4 ms
(                    printf\("%-*s", INPUT_COL, "Stock name:"\);)59.5 382.4 ms
(        })59.5 372.4 ms
(        //OUTPUT)59.5 352.4 ms
(        printf\("\\n\\n%*s\\n\\n", EXIT_COL, "---------- Stock Summary ----------"\);)59.5 342.4 ms
(        )59.5 332.4 ms
(        //traverse linked list and output stock name, share costs and profit)59.5 322.4 ms
(        node = head;)59.5 312.4 ms
(        sumProfits = 0;)59.5 302.4 ms
(        while\(node != NULL\))59.5 292.4 ms
(        {)59.5 282.4 ms
(                sumProfits += node->profit;)59.5 272.4 ms
(                printf\("%*s %s", OUTPUT_COL, "Stock Name:", node->name\);)59.5 252.4 ms
(                printf\("%*s $%.2lf\\n", OUTPUT_COL, "Initial Cost:", node->initialCos)59.5 242.4 ms
(t\);)59.5 232.4 ms
(                printf\("%*s $%.2lf\\n", OUTPUT_COL, "Current Cost:", node->currentCos)59.5 222.4 ms
(t\);)59.5 212.4 ms
(                printf\("%*s $%.2lf\\n\\n", OUTPUT_COL, "Profit:", node->profit\);)59.5 202.4 ms
(                node = node->next;)59.5 182.4 ms
(        })59.5 172.4 ms
(        //output total profits for all stocks)59.5 152.4 ms
(        printf\("\\n%s: $%.2lf\\n\\n", "Total profits for all stocks", sumProfits\);)59.5 142.4 ms
(        //FREE Memory)59.5 122.4 ms
(        while\(head != NULL\))59.5 112.4 ms
(        {)59.5 102.4 ms
(                node = head;)59.5 92.4 ms
(                head = head->next;)59.5 82.4 ms
(                free\(node\); )59.5 72.4 ms
(        })59.5 62.4 ms
re sp
%%PageTrailer
%%Page: 3 3
%%BeginPageSetup
sv
0 g
F0 sf
%%EndPageSetup
F1 sf
(Homework01_ProgramSet03.c                                                     Page 3)59.5 792.4 ms
F0 sf
(        return 0;)59.5 772.4 ms
(})59.5 762.4 ms
(/*)59.5 722.4 ms
(         Enter 0 for 'Stock name' to exit)59.5 702.4 ms
(             Stock name: IBM)59.5 682.4 ms
(       Number of shares: 150)59.5 672.4 ms
( Buying price per share: $11.33)59.5 662.4 ms
(Current price per share: $13.33)59.5 652.4 ms
(            Yearly fees: $5.00)59.5 642.4 ms
(             Stock name: ORACLE)59.5 622.4 ms
(       Number of shares: 215)59.5 612.4 ms
( Buying price per share: $10.77)59.5 602.4 ms
(Current price per share: $12.25)59.5 592.4 ms
(            Yearly fees: $3.50)59.5 582.4 ms
(             Stock name: SUN MICRO)59.5 562.4 ms
(       Number of shares: 355)59.5 552.4 ms
( Buying price per share: $25.55)59.5 542.4 ms
(Current price per share: $35.75)59.5 532.4 ms
(            Yearly fees: $12.25)59.5 522.4 ms
(             Stock name: LINKSYS)59.5 502.4 ms
(       Number of shares: 75)59.5 492.4 ms
( Buying price per share: $22.34)59.5 482.4 ms
(Current price per share: $23.34)59.5 472.4 ms
(            Yearly fees: $6.00)59.5 462.4 ms
(             Stock name: CISCO)59.5 442.4 ms
(       Number of shares: 50)59.5 432.4 ms
( Buying price per share: $45.36)59.5 422.4 ms
(Current price per share: $50.86)59.5 412.4 ms
(            Yearly fees: $1.50)59.5 402.4 ms
(             Stock name: 0)59.5 382.4 ms
(      ---------- Stock Summary ----------)59.5 352.4 ms
(             Stock Name: IBM)59.5 332.4 ms
(           Initial Cost: $1699.50)59.5 322.4 ms
(           Current Cost: $1999.50)59.5 312.4 ms
(                 Profit: $295.00)59.5 302.4 ms
(             Stock Name: ORACLE)59.5 282.4 ms
(           Initial Cost: $2315.55)59.5 272.4 ms
(           Current Cost: $2633.75)59.5 262.4 ms
(                 Profit: $314.70)59.5 252.4 ms
(             Stock Name: SUN MICRO)59.5 232.4 ms
(           Initial Cost: $9070.25)59.5 222.4 ms
(           Current Cost: $12691.25)59.5 212.4 ms
(                 Profit: $3608.75)59.5 202.4 ms
(             Stock Name: LINKSYS)59.5 182.4 ms
(           Initial Cost: $1675.50)59.5 172.4 ms
(           Current Cost: $1750.50)59.5 162.4 ms
(                 Profit: $69.00)59.5 152.4 ms
(             Stock Name: CISCO)59.5 132.4 ms
(           Initial Cost: $2268.00)59.5 122.4 ms
(           Current Cost: $2543.00)59.5 112.4 ms
(                 Profit: $273.50)59.5 102.4 ms
(Total profits for all stocks: $4560.95)59.5 72.4 ms
(*/)59.5 52.4 ms
re sp
%%PageTrailer
%%Trailer
%%Pages: 3
%%EOF
